import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchHappyCustomers,
  fetchEditHCustomer,
  fetchDeleteHCustomer,
  fetchCreateHCustomer,
} from "./customerApi";

const initialState = {
  hcustomers: [],
  status: "idle",
  deleteDataShow:{},
  message:null,
  viewDataShow:{}
};

// Fetch Blog data APIs Call
export const fetchHappyCustomersAsync = createAsyncThunk(
  "hcustomer/fetchHappyCustomers",
  async () => {
    const response = await fetchHappyCustomers();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// Create Blog APIs Call
export const fetchCreateHCustomerAsync = createAsyncThunk(
  "hcustomer/fetchCreateHCustomer",
  async (hcustomerData) => {
    const response = await fetchCreateHCustomer(hcustomerData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// Edit Blogs APIs Call
export const fetchEditHCustomerAsync = createAsyncThunk(
  "hcustomer/fetchEditHCustomer",
  async (hcustomerData) => {
    const response = await fetchEditHCustomer(hcustomerData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// Delete Blogs APIs Call
export const fetchDeleteHCustomerAsync = createAsyncThunk(
  "hcustomer/fetchDeleteHCustomer",
  async (hcustomerID) => {
    const response = await fetchDeleteHCustomer(hcustomerID);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const h_customerSlice = createSlice({
  name: "hcustomer",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    delete_data_show: (state, action) => {
      state.deleteDataShow = action.payload;
    },
    view_data_show: (state, action) => {
      state.viewDataShow = action.payload;
    }
  },

  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchHappyCustomersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchHappyCustomersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.hcustomers = action.payload;
      })
      .addCase(fetchEditHCustomerAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEditHCustomerAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.message = action.payload;
      })
      .addCase(fetchDeleteHCustomerAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchDeleteHCustomerAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.message = action.payload;
      })
      .addCase(fetchCreateHCustomerAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCreateHCustomerAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.message = action.payload;
      });
  },
});

export const { delete_data_show, view_data_show } = h_customerSlice.actions;

// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectHCustomers = (state) => state.hcustomer.hcustomers;
export const selectDeleteDataShow = (state) => state.hcustomer.deleteDataShow;
export const selectViewDataShow = (state) => state.hcustomer.viewDataShow;

export default h_customerSlice.reducer;
